Qflow synthesis logfile created on piÄ…, 5 cze 2020, 18:37:14 CEST
Running yosys for verilog parsing and synthesis
yosys  -s adder.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `adder.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/karolina/OiAK_projekt/source/adder.v
Parsing Verilog input from `/home/karolina/OiAK_projekt/source/adder.v' to AST representation.
Generating RTLIL representation for module `\adder'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: dot.v
Parsing Verilog input from `dot.v' to AST representation.
Generating RTLIL representation for module `\dot'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: in.v
Parsing Verilog input from `in.v' to AST representation.
Generating RTLIL representation for module `\in'.
Successfully finished Verilog frontend.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \adder
Used module:     \dot
Used module:     \in

5.1.2. Analyzing design hierarchy..
Top module:  \adder
Used module:     \dot
Used module:     \in
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

5.2.3. Executing PROC_INIT pass (extract init attributes).

5.2.4. Executing PROC_ARST pass (detect async resets in processes).

5.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

5.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

5.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module in.
Optimizing module dot.
Optimizing module adder.

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \in..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \adder..
Removed 0 unused cells and 11 unused wires.
<suppressed ~3 debug messages>

5.5. Executing CHECK pass (checking for obvious problems).
checking module adder..
checking module dot..
checking module in..
found and reported 0 problems.

5.6. Executing OPT pass (performing simple optimizations).

5.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module dot.
Optimizing module in.

5.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\dot'.
Finding identical cells in module `\in'.
Removed a total of 0 cells.

5.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dot..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \in..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
  Optimizing cells in module \dot.
  Optimizing cells in module \in.
Performed a total of 0 changes.

5.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\dot'.
Finding identical cells in module `\in'.
Removed a total of 0 cells.

5.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \in..

5.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module dot.
Optimizing module in.

5.6.9. Finished OPT passes. (There is nothing left to do.)

5.7. Executing WREDUCE pass (reducing word size of cells).

5.8. Executing PEEPOPT pass (run peephole optimizers).

5.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \in..

5.10. Executing TECHMAP pass (map to technology primitives).

5.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

5.10.2. Continuing TECHMAP pass.
No more expansions possible.

5.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module adder:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module dot:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module in:
  created 0 $alu and 0 $macc cells.

5.12. Executing SHARE pass (SAT-based resource sharing).

5.13. Executing OPT pass (performing simple optimizations).

5.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module dot.
Optimizing module in.

5.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\dot'.
Finding identical cells in module `\in'.
Removed a total of 0 cells.

5.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dot..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \in..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
  Optimizing cells in module \dot.
  Optimizing cells in module \in.
Performed a total of 0 changes.

5.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\dot'.
Finding identical cells in module `\in'.
Removed a total of 0 cells.

5.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \in..

5.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module dot.
Optimizing module in.

5.13.9. Finished OPT passes. (There is nothing left to do.)

5.14. Executing FSM pass (extract and optimize FSM).

5.14.1. Executing FSM_DETECT pass (finding FSMs in design).

5.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \in..

5.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module dot.
Optimizing module in.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\dot'.
Finding identical cells in module `\in'.
Removed a total of 0 cells.

5.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

5.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \in..

5.15.5. Finished fast OPT passes.

5.16. Executing MEMORY pass.

5.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

5.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \in..

5.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \in..

5.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \in..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module dot.
Optimizing module in.

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\dot'.
Finding identical cells in module `\in'.
Removed a total of 0 cells.

5.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \in..

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module dot.
Optimizing module in.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\dot'.
Finding identical cells in module `\in'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dot..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \in..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
  Optimizing cells in module \dot.
  Optimizing cells in module \in.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\dot'.
Finding identical cells in module `\in'.
Removed a total of 0 cells.

5.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \in..

5.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module dot.
Optimizing module in.

5.20.9. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~11 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module dot.
Optimizing module in.

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\dot'.
Finding identical cells in module `\in'.
Removed a total of 0 cells.

5.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \in..

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\adder' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 15 wires to a netlist network with 10 inputs and 5 outputs.

5.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:        5
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        5
Removing temp directory.

5.23.2. Extracting gate netlist of module `\dot' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

5.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:                OR cells:        1
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        2
Removing temp directory.

5.23.3. Extracting gate netlist of module `\in' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 5 wires to a netlist network with 2 inputs and 3 outputs.

5.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        1
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        3
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module dot.
Optimizing module in.

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\dot'.
Finding identical cells in module `\in'.
Removed a total of 0 cells.

5.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \in..
Removed 0 unused cells and 27 unused wires.
<suppressed ~4 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \adder
Used module:     \dot
Used module:     \in

5.25.2. Analyzing design hierarchy..
Top module:  \adder
Used module:     \dot
Used module:     \in
Removed 0 unused modules.

5.26. Printing statistics.

=== adder ===

   Number of wires:                 46
   Number of wire bits:             46
   Number of public wires:          46
   Number of public wire bits:      46
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     $_XOR_                          5
     dot                             7
     in                              6

=== dot ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           6
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_AND_                          2
     $_OR_                           1

=== in ===

   Number of wires:                  5
   Number of wire bits:              5
   Number of public wires:           5
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $_AND_                          1
     $_OR_                           1
     $_XOR_                          1

=== design hierarchy ===

   adder                             1
     dot                             7
     in                              6

   Number of wires:                125
   Number of wire bits:            125
   Number of public wires:         118
   Number of public wire bits:     118
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     $_AND_                         20
     $_OR_                          13
     $_XOR_                         11

5.27. Executing CHECK pass (checking for obvious problems).
checking module adder..
checking module dot..
checking module in..
found and reported 0 problems.

6. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=1584.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\adder':
Mapping DFF cells in module `\dot':
Mapping DFF cells in module `\in':

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module dot.
Optimizing module in.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\dot'.
Finding identical cells in module `\in'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dot..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \in..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
  Optimizing cells in module \dot.
  Optimizing cells in module \in.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Finding identical cells in module `\dot'.
Finding identical cells in module `\in'.
Removed a total of 0 cells.

7.6. Executing OPT_RMDFF pass (remove dff with constant values).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
Finding unused cells or wires in module \dot..
Finding unused cells or wires in module \in..

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.
Optimizing module dot.
Optimizing module in.

7.9. Finished OPT passes. (There is nothing left to do.)

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\adder' to `<abc-temp-dir>/input.blif'..
Extracted 5 gates and 15 wires to a netlist network with 10 inputs and 5 outputs.

8.1.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu050/osu05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu05_stdcells" from "/usr/share/qflow/tech/osu050/osu05_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:            XOR2X1 cells:        5
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:        5
Removing temp directory.

8.2. Extracting gate netlist of module `\dot' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.

8.2.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu050/osu05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu05_stdcells" from "/usr/share/qflow/tech/osu050/osu05_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:           NAND2X1 cells:        2
ABC RESULTS:        internal signals:        1
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        2
Removing temp directory.

8.3. Extracting gate netlist of module `\in' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 5 wires to a netlist network with 2 inputs and 3 outputs.

8.3.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu050/osu05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu05_stdcells" from "/usr/share/qflow/tech/osu050/osu05_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.3.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        2
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        3
Removing temp directory.

9. Executing FLATTEN pass (flatten design).
Using template in for cells of type in.
Using template dot for cells of type dot.
<suppressed ~13 debug messages>
No more expansions possible.
Deleting now unused module dot.
Deleting now unused module in.

10. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 6 unused cells and 169 unused wires.

11. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port adder.ov using BUFX2.
Mapping port adder.s0 using BUFX2.
Mapping port adder.s1 using BUFX2.
Mapping port adder.s2 using BUFX2.
Mapping port adder.s3 using BUFX2.
Mapping port adder.s4 using BUFX2.
Mapping port adder.s5 using BUFX2.
Don't map input port adder.x0: Missing option -inpad.
Don't map input port adder.x1: Missing option -inpad.
Don't map input port adder.x2: Missing option -inpad.
Don't map input port adder.x3: Missing option -inpad.
Don't map input port adder.x4: Missing option -inpad.
Don't map input port adder.x5: Missing option -inpad.
Don't map input port adder.y0: Missing option -inpad.
Don't map input port adder.y1: Missing option -inpad.
Don't map input port adder.y2: Missing option -inpad.
Don't map input port adder.y3: Missing option -inpad.
Don't map input port adder.y4: Missing option -inpad.
Don't map input port adder.y5: Missing option -inpad.

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder.
Performed a total of 0 changes.

12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

12.6. Executing OPT_RMDFF pass (remove dff with constant values).

12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder.

12.9. Finished OPT passes. (There is nothing left to do.)

13. Executing BLIF backend.

14. Printing statistics.

=== adder ===

   Number of wires:                 76
   Number of wire bits:             76
   Number of public wires:          76
   Number of public wire bits:      76
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 64
     AND2X2                          2
     BUFX2                           7
     INVX1                          19
     NAND2X1                        19
     NOR2X1                          6
     XOR2X1                         11

End of script. Logfile hash: 57e4835902
CPU: user 0.19s system 0.00s, MEM: 16.49 MB total, 10.96 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 25% 1x share (0 sec), 15% 15x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/share/qflow/tech/osu050/osu050_stdcells.lef
Cleaning up output syntax
ypostproc.tcl adder_mapped.blif adder /usr/share/qflow/tech/osu050/osu050.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 300 -c 75 -I adder_nofanout -s nullstring -p /usr/share/qflow/tech/osu050/osu05_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif adder.blif

blifFanout for qflow 1.3.17
Parsing library "osu05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Top internal fanout is 3 (load 170.322) from node dot3.Ghl,
driven by NAND2X1 with strength 165.779 (fF driven at latency 300)
Top fanout load-to-strength ratio is 0.799109 (latency = 239.733 ps)
Top input node fanout is 2 (load 79.8321) from node x5.
0 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 55    	Out: 55    	+0
	"2" gates	In: 9    	Out: 9    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/karolina/OiAK_projekt/synthesis
Files:
   Verilog: /home/karolina/OiAK_projekt/synthesis/adder.rtl.v
   Verilog: /home/karolina/OiAK_projekt/synthesis/adder.rtlnopwr.v
   Verilog: /home/karolina/OiAK_projekt/synthesis/adder.rtlbb.v
   Spice:   /home/karolina/OiAK_projekt/synthesis/adder.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/share/qflow/tech/osu050/osu05_stdcells.lib" adder.spc adder.xspice

Synthesis script ended on piÄ…, 5 cze 2020, 18:37:17 CEST
